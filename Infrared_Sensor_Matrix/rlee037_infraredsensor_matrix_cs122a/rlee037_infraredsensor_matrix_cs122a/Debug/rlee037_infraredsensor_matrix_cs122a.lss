
rlee037_infraredsensor_matrix_cs122a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000972  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000867  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000340  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001788  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ab  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d6  00000000  00000000  00001cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001d9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	41 d0       	rcall	.+130    	; 0x11c <main>
  9a:	5b c0       	rjmp	.+182    	; 0x152 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ADC_init>:
    ADCSRA |= (1 << ADEN); //ADC Enable
    return;
}

void ADC_off(void) {
    ADCSRA &= ~(1 << ADEN); //ADC Disable
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 6e       	ori	r24, 0xE0	; 224
  a6:	80 83       	st	Z, r24
  a8:	08 95       	ret

000000aa <ADC_read>:
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	87 70       	andi	r24, 0x07	; 7
  b2:	98 2b       	or	r25, r24
  b4:	90 83       	st	Z, r25
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	84 ff       	sbrs	r24, 4
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <ADC_read+0x16>
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	80 83       	st	Z, r24
  d0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  dc:	96 95       	lsr	r25
  de:	87 95       	ror	r24
  e0:	96 95       	lsr	r25
  e2:	87 95       	ror	r24
  e4:	08 95       	ret

000000e6 <ADC_on>:
  e6:	ea e7       	ldi	r30, 0x7A	; 122
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <SensorMatrix_init>:
//Controls which row gets read as input
#define DDR_CONTROL  DDRB
#define PORT_CONTROL PORTB

void SensorMatrix_init() {
    DDR_CONTROL = 0xFF; PORT_CONTROL = 0x00; //Initialize to output
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	84 b9       	out	0x04, r24	; 4
  f6:	15 b8       	out	0x05, r1	; 5
    
    ADC_init();
  f8:	d2 df       	rcall	.-92     	; 0x9e <ADC_init>
    ADC_on();
  fa:	f5 cf       	rjmp	.-22     	; 0xe6 <ADC_on>
  fc:	08 95       	ret

000000fe <SensorMatrix_getInput>:
  fe:	80 e0       	ldi	r24, 0x00	; 0
    return;
}

void SensorMatrix_getInput(unsigned char positions[]) { //position array should always contain 8 chars
    for (unsigned char i = 0; i < 2; ++i) {
        if (ADC_read(i) < 200) {PORTD |= (1 << i);}
 100:	d4 df       	rcall	.-88     	; 0xaa <ADC_read>
 102:	88 3c       	cpi	r24, 0xC8	; 200
 104:	10 f0       	brcs	.+4      	; 0x10a <SensorMatrix_getInput+0xc>
        else {PORTD &= ~(1 << i);}
 106:	58 98       	cbi	0x0b, 0	; 11
 108:	01 c0       	rjmp	.+2      	; 0x10c <SensorMatrix_getInput+0xe>
    return;
}

void SensorMatrix_getInput(unsigned char positions[]) { //position array should always contain 8 chars
    for (unsigned char i = 0; i < 2; ++i) {
        if (ADC_read(i) < 200) {PORTD |= (1 << i);}
 10a:	58 9a       	sbi	0x0b, 0	; 11
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	cd df       	rcall	.-102    	; 0xaa <ADC_read>
 110:	88 3c       	cpi	r24, 0xC8	; 200
 112:	10 f4       	brcc	.+4      	; 0x118 <SensorMatrix_getInput+0x1a>
 114:	59 9a       	sbi	0x0b, 1	; 11
 116:	08 95       	ret
        else {PORTD &= ~(1 << i);}
 118:	59 98       	cbi	0x0b, 1	; 11
 11a:	08 95       	ret

0000011c <main>:
#include <avr/io.h>

#include "sensor_matrix_8x8.h"

int main(void)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	28 97       	sbiw	r28, 0x08	; 8
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0x00; PORTA = 0xFF;
 130:	11 b8       	out	0x01, r1	; 1
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	82 b9       	out	0x02, r24	; 2
    DDRD = 0xFF; PORTD = 0x00;
 136:	8a b9       	out	0x0a, r24	; 10
 138:	1b b8       	out	0x0b, r1	; 11
    SensorMatrix_init();
 13a:	db df       	rcall	.-74     	; 0xf2 <SensorMatrix_init>
    
    unsigned char inputs[8] = {0x00};
 13c:	fe 01       	movw	r30, r28
 13e:	31 96       	adiw	r30, 0x01	; 1
 140:	88 e0       	ldi	r24, 0x08	; 8
 142:	df 01       	movw	r26, r30
 144:	1d 92       	st	X+, r1
 146:	8a 95       	dec	r24
 148:	e9 f7       	brne	.-6      	; 0x144 <main+0x28>
    
    while (1) {
        //PORTD = ADC_read(0);
        SensorMatrix_getInput(inputs);
 14a:	ce 01       	movw	r24, r28
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	d7 df       	rcall	.-82     	; 0xfe <SensorMatrix_getInput>
 150:	fc cf       	rjmp	.-8      	; 0x14a <main+0x2e>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
