
rlee037_reactive_LED_matrix_cs122a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003ba  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800104  00800104  00000452  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db7  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b5  00000000  00000000  0000132b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000663  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00002344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000541  00000000  00000000  00002ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000030e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	af c0       	rjmp	.+350    	; 0x194 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 32       	cpi	r26, 0x27	; 39
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4a d1       	rcall	.+660    	; 0x358 <main>
  c4:	78 c1       	rjmp	.+752    	; 0x3b6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
            y_output = 0x00;
            break;
    }
    
    return state;
}
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  f8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
  fc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 100:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 104:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <TimerISR>:
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cb e0       	ldi	r28, 0x0B	; 11
 11e:	d1 e0       	ldi	r29, 0x01	; 1
 120:	0f 2e       	mov	r0, r31
 122:	f3 e2       	ldi	r31, 0x23	; 35
 124:	ef 2e       	mov	r14, r31
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	ff 2e       	mov	r15, r31
 12a:	f0 2d       	mov	r31, r0
 12c:	8e 01       	movw	r16, r28
 12e:	89 85       	ldd	r24, Y+9	; 0x09
 130:	88 23       	and	r24, r24
 132:	c9 f0       	breq	.+50     	; 0x166 <TimerISR+0x56>
 134:	4d 81       	ldd	r20, Y+5	; 0x05
 136:	5e 81       	ldd	r21, Y+6	; 0x06
 138:	6f 81       	ldd	r22, Y+7	; 0x07
 13a:	78 85       	ldd	r23, Y+8	; 0x08
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	9a 81       	ldd	r25, Y+2	; 0x02
 140:	ab 81       	ldd	r26, Y+3	; 0x03
 142:	bc 81       	ldd	r27, Y+4	; 0x04
 144:	48 17       	cp	r20, r24
 146:	59 07       	cpc	r21, r25
 148:	6a 07       	cpc	r22, r26
 14a:	7b 07       	cpc	r23, r27
 14c:	60 f0       	brcs	.+24     	; 0x166 <TimerISR+0x56>
 14e:	88 81       	ld	r24, Y
 150:	ea 85       	ldd	r30, Y+10	; 0x0a
 152:	fb 85       	ldd	r31, Y+11	; 0x0b
 154:	08 2e       	mov	r0, r24
 156:	00 0c       	add	r0, r0
 158:	99 0b       	sbc	r25, r25
 15a:	09 95       	icall
 15c:	88 83       	st	Y, r24
 15e:	1d 82       	std	Y+5, r1	; 0x05
 160:	1e 82       	std	Y+6, r1	; 0x06
 162:	1f 82       	std	Y+7, r1	; 0x07
 164:	18 86       	std	Y+8, r1	; 0x08
 166:	f8 01       	movw	r30, r16
 168:	85 81       	ldd	r24, Z+5	; 0x05
 16a:	96 81       	ldd	r25, Z+6	; 0x06
 16c:	a7 81       	ldd	r26, Z+7	; 0x07
 16e:	b0 85       	ldd	r27, Z+8	; 0x08
 170:	c2 96       	adiw	r24, 0x32	; 50
 172:	a1 1d       	adc	r26, r1
 174:	b1 1d       	adc	r27, r1
 176:	85 83       	std	Z+5, r24	; 0x05
 178:	96 83       	std	Z+6, r25	; 0x06
 17a:	a7 83       	std	Z+7, r26	; 0x07
 17c:	b0 87       	std	Z+8, r27	; 0x08
 17e:	2c 96       	adiw	r28, 0x0c	; 12
 180:	ce 15       	cp	r28, r14
 182:	df 05       	cpc	r29, r15
 184:	99 f6       	brne	.-90     	; 0x12c <TimerISR+0x1c>
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	ff 90       	pop	r15
 190:	ef 90       	pop	r14
 192:	08 95       	ret

00000194 <__vector_13>:
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	0b b6       	in	r0, 0x3b	; 59
 1a0:	0f 92       	push	r0
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	4f 93       	push	r20
 1a8:	5f 93       	push	r21
 1aa:	6f 93       	push	r22
 1ac:	7f 93       	push	r23
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
 1ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
 1be:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
 1c2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
 1c6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	a1 09       	sbc	r26, r1
 1ce:	b1 09       	sbc	r27, r1
 1d0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 1d4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 1d8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 1dc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 1e0:	89 2b       	or	r24, r25
 1e2:	8a 2b       	or	r24, r26
 1e4:	8b 2b       	or	r24, r27
 1e6:	89 f4       	brne	.+34     	; 0x20a <__vector_13+0x76>
 1e8:	93 df       	rcall	.-218    	; 0x110 <TimerISR>
 1ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1f6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1fa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 1fe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 202:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 206:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	7f 91       	pop	r23
 218:	6f 91       	pop	r22
 21a:	5f 91       	pop	r21
 21c:	4f 91       	pop	r20
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0b be       	out	0x3b, r0	; 59
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <TimerSet>:
 230:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 234:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 238:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 23c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 240:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_cntcurr>
 244:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_cntcurr+0x1>
 248:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr+0x2>
 24c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x3>
 250:	08 95       	ret

00000252 <MUX8x1_init>:
 252:	81 b1       	in	r24, 0x01	; 1
 254:	8c 7f       	andi	r24, 0xFC	; 252
 256:	81 b9       	out	0x01, r24	; 1
 258:	82 b1       	in	r24, 0x02	; 2
 25a:	83 60       	ori	r24, 0x03	; 3
 25c:	82 b9       	out	0x02, r24	; 2
 25e:	8a b1       	in	r24, 0x0a	; 10
 260:	80 67       	ori	r24, 0x70	; 112
 262:	8a b9       	out	0x0a, r24	; 10
 264:	1b b8       	out	0x0b, r1	; 11
 266:	08 95       	ret

00000268 <MUX8x1_select>:
 268:	9b b1       	in	r25, 0x0b	; 11
 26a:	9f 78       	andi	r25, 0x8F	; 143
 26c:	9b b9       	out	0x0b, r25	; 11
 26e:	9b b1       	in	r25, 0x0b	; 11
 270:	28 2f       	mov	r18, r24
 272:	21 70       	andi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	22 95       	swap	r18
 278:	32 95       	swap	r19
 27a:	30 7f       	andi	r19, 0xF0	; 240
 27c:	32 27       	eor	r19, r18
 27e:	20 7f       	andi	r18, 0xF0	; 240
 280:	32 27       	eor	r19, r18
 282:	82 70       	andi	r24, 0x02	; 2
 284:	82 95       	swap	r24
 286:	88 0f       	add	r24, r24
 288:	80 7e       	andi	r24, 0xE0	; 224
 28a:	28 2b       	or	r18, r24
 28c:	29 2b       	or	r18, r25
 28e:	2b b9       	out	0x0b, r18	; 11
 290:	08 95       	ret

00000292 <MUX8x1_getData>:
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	c0 e0       	ldi	r28, 0x00	; 0
 29c:	d0 e0       	ldi	r29, 0x00	; 0
 29e:	81 2f       	mov	r24, r17
 2a0:	e3 df       	rcall	.-58     	; 0x268 <MUX8x1_select>
 2a2:	80 b1       	in	r24, 0x00	; 0
 2a4:	d1 60       	ori	r29, 0x01	; 1
 2a6:	80 b1       	in	r24, 0x00	; 0
 2a8:	8c 2f       	mov	r24, r28
 2aa:	81 60       	ori	r24, 0x01	; 1
 2ac:	dd 0f       	add	r29, r29
 2ae:	c8 2f       	mov	r28, r24
 2b0:	cc 0f       	add	r28, r28
 2b2:	1f 5f       	subi	r17, 0xFF	; 255
 2b4:	18 30       	cpi	r17, 0x08	; 8
 2b6:	99 f7       	brne	.-26     	; 0x29e <MUX8x1_getData+0xc>
 2b8:	8c 2f       	mov	r24, r28
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	9d 2b       	or	r25, r29
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	08 95       	ret

000002c6 <Tick_Sensor>:
 2c6:	00 97       	sbiw	r24, 0x00	; 0
 2c8:	19 f0       	breq	.+6      	; 0x2d0 <Tick_Sensor+0xa>
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	59 f0       	breq	.+22     	; 0x2e4 <Tick_Sensor+0x1e>
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <Tick_Sensor+0xe>
 2d0:	c0 df       	rcall	.-128    	; 0x252 <MUX8x1_init>
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <Tick_Sensor+0x1e>
 2d4:	be df       	rcall	.-132    	; 0x252 <MUX8x1_init>
 2d6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 2da:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	08 95       	ret
 2e4:	d6 df       	rcall	.-84     	; 0x292 <MUX8x1_getData>
 2e6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 2ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	08 95       	ret

000002f4 <SPI_MasterInit>:
 2f4:	80 ea       	ldi	r24, 0xA0	; 160
 2f6:	84 b9       	out	0x04, r24	; 4
 2f8:	81 e5       	ldi	r24, 0x51	; 81
 2fa:	8c bd       	out	0x2c, r24	; 44
 2fc:	08 95       	ret

000002fe <SPI_Transmit>:
 2fe:	96 2f       	mov	r25, r22
 300:	91 70       	andi	r25, 0x01	; 1
 302:	60 ff       	sbrs	r22, 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <SPI_Transmit+0xc>
 306:	2b 98       	cbi	0x05, 3	; 5
 308:	02 c0       	rjmp	.+4      	; 0x30e <SPI_Transmit+0x10>
 30a:	61 fd       	sbrc	r22, 1
 30c:	2c 98       	cbi	0x05, 4	; 5
 30e:	8e bd       	out	0x2e, r24	; 46
 310:	0d b4       	in	r0, 0x2d	; 45
 312:	07 fe       	sbrs	r0, 7
 314:	fd cf       	rjmp	.-6      	; 0x310 <SPI_Transmit+0x12>
 316:	99 23       	and	r25, r25
 318:	11 f0       	breq	.+4      	; 0x31e <SPI_Transmit+0x20>
 31a:	2b 9a       	sbi	0x05, 3	; 5
 31c:	08 95       	ret
 31e:	61 fd       	sbrc	r22, 1
 320:	2c 9a       	sbi	0x05, 4	; 5
 322:	08 95       	ret

00000324 <LEDMatrix8x8_display>:
 324:	cf 93       	push	r28
 326:	c6 2f       	mov	r28, r22
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	e9 df       	rcall	.-46     	; 0x2fe <SPI_Transmit>
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	8c 2f       	mov	r24, r28
 330:	e6 df       	rcall	.-52     	; 0x2fe <SPI_Transmit>
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <Tick_LED8x8>:
 336:	00 97       	sbiw	r24, 0x00	; 0
 338:	19 f0       	breq	.+6      	; 0x340 <Tick_LED8x8+0xa>
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	39 f0       	breq	.+14     	; 0x34c <Tick_LED8x8+0x16>
 33e:	02 c0       	rjmp	.+4      	; 0x344 <Tick_LED8x8+0xe>
 340:	d9 df       	rcall	.-78     	; 0x2f4 <SPI_MasterInit>
 342:	04 c0       	rjmp	.+8      	; 0x34c <Tick_LED8x8+0x16>
 344:	d7 df       	rcall	.-82     	; 0x2f4 <SPI_MasterInit>
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	08 95       	ret
 34c:	67 e0       	ldi	r22, 0x07	; 7
 34e:	87 e0       	ldi	r24, 0x07	; 7
 350:	e9 df       	rcall	.-46     	; 0x324 <LEDMatrix8x8_display>
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	08 95       	ret

00000358 <main>:

#include "timer_functions.h"
#include "reactive_led_matrix_sm.h"

int main(void) {
    DDRA = 0x00; PORTA = 0xFF; //Initialize PORTA for input
 358:	11 b8       	out	0x01, r1	; 1
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	82 b9       	out	0x02, r24	; 2
    DDRD = 0xFF; PORTD = 0x00; //Initialize PORTD for output
 35e:	8a b9       	out	0x0a, r24	; 10
 360:	1b b8       	out	0x0b, r1	; 11
    
    unsigned char i = 0;
    tasks[i].state       = INIT_SENSOR;
 362:	eb e0       	ldi	r30, 0x0B	; 11
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	10 82       	st	Z, r1
    tasks[i].period      = SENSOR_PERIOD;
 368:	44 e6       	ldi	r20, 0x64	; 100
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	41 83       	std	Z+1, r20	; 0x01
 372:	52 83       	std	Z+2, r21	; 0x02
 374:	63 83       	std	Z+3, r22	; 0x03
 376:	74 83       	std	Z+4, r23	; 0x04
    tasks[i].elapsedTime = 0;
 378:	15 82       	std	Z+5, r1	; 0x05
 37a:	16 82       	std	Z+6, r1	; 0x06
 37c:	17 82       	std	Z+7, r1	; 0x07
 37e:	10 86       	std	Z+8, r1	; 0x08
    tasks[i].active      = 0x01;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	81 87       	std	Z+9, r24	; 0x09
    tasks[i].TickFct     = &Tick_Sensor;
 384:	23 e6       	ldi	r18, 0x63	; 99
 386:	31 e0       	ldi	r19, 0x01	; 1
 388:	33 87       	std	Z+11, r19	; 0x0b
 38a:	22 87       	std	Z+10, r18	; 0x0a
    ++i;
    tasks[i].state       = INIT_LED8x8;
 38c:	14 86       	std	Z+12, r1	; 0x0c
    tasks[i].period      = LED8x8_PERIOD;
 38e:	45 87       	std	Z+13, r20	; 0x0d
 390:	56 87       	std	Z+14, r21	; 0x0e
 392:	67 87       	std	Z+15, r22	; 0x0f
 394:	70 8b       	std	Z+16, r23	; 0x10
    tasks[i].elapsedTime = 0;
 396:	11 8a       	std	Z+17, r1	; 0x11
 398:	12 8a       	std	Z+18, r1	; 0x12
 39a:	13 8a       	std	Z+19, r1	; 0x13
 39c:	14 8a       	std	Z+20, r1	; 0x14
    tasks[i].active      = 0x01;
 39e:	85 8b       	std	Z+21, r24	; 0x15
    tasks[i].TickFct     = &Tick_LED8x8;
 3a0:	8b e9       	ldi	r24, 0x9B	; 155
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	97 8b       	std	Z+23, r25	; 0x17
 3a6:	86 8b       	std	Z+22, r24	; 0x16
    ++i;
    
    TimerSet(GLOBAL_PERIOD);
 3a8:	62 e3       	ldi	r22, 0x32	; 50
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	3f df       	rcall	.-386    	; 0x230 <TimerSet>
    TimerOn();
 3b2:	8a de       	rcall	.-748    	; 0xc8 <TimerOn>
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <main+0x5c>

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
