
rlee037_reactive_LED_matrix_cs122a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003ac  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800104  00800104  00000444  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001196  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6c  00000000  00000000  00001782  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009db  00000000  00000000  000021ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00002bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000776  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079b  00000000  00000000  0000360a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00003da5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c9 c0       	rjmp	.+402    	; 0x1c8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 32       	cpi	r26, 0x29	; 41
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3c d1       	rcall	.+632    	; 0x33c <main>
  c4:	71 c1       	rjmp	.+738    	; 0x3a8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_BacklightOn>:
	delay_ms(10);		
    
}

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
  c8:	5d 9a       	sbi	0x0b, 5	; 11
  ca:	08 95       	ret

000000cc <delay_ms>:
  cc:	18 16       	cp	r1, r24
  ce:	19 06       	cpc	r1, r25
  d0:	5c f0       	brlt	.+22     	; 0xe8 <delay_ms+0x1c>
  d2:	08 95       	ret
  d4:	00 00       	nop
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	31 09       	sbc	r19, r1
  da:	e1 f7       	brne	.-8      	; 0xd4 <delay_ms+0x8>
  dc:	4f 5f       	subi	r20, 0xFF	; 255
  de:	5f 4f       	sbci	r21, 0xFF	; 255
  e0:	84 17       	cp	r24, r20
  e2:	95 07       	cpc	r25, r21
  e4:	19 f4       	brne	.+6      	; 0xec <delay_ms+0x20>
  e6:	08 95       	ret
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	27 e0       	ldi	r18, 0x07	; 7
  ee:	33 e0       	ldi	r19, 0x03	; 3
  f0:	f1 cf       	rjmp	.-30     	; 0xd4 <delay_ms+0x8>

000000f2 <LCD_WriteCommand>:
  f2:	5e 98       	cbi	0x0b, 6	; 11
  f4:	88 b9       	out	0x08, r24	; 8
  f6:	5f 9a       	sbi	0x0b, 7	; 11
  f8:	00 00       	nop
  fa:	5f 98       	cbi	0x0b, 7	; 11
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	e5 cf       	rjmp	.-54     	; 0xcc <delay_ms>
 102:	08 95       	ret

00000104 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 104:	81 31       	cpi	r24, 0x11	; 17
 106:	18 f4       	brcc	.+6      	; 0x10e <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 108:	81 58       	subi	r24, 0x81	; 129
 10a:	f3 cf       	rjmp	.-26     	; 0xf2 <LCD_WriteCommand>
 10c:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 10e:	81 55       	subi	r24, 0x51	; 81
 110:	f0 cf       	rjmp	.-32     	; 0xf2 <LCD_WriteCommand>
 112:	08 95       	ret

00000114 <LCD_init>:
}

void LCD_init(void) {
    
    //wait for 100 ms.
	delay_ms(100);
 114:	84 e6       	ldi	r24, 0x64	; 100
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	d9 df       	rcall	.-78     	; 0xcc <delay_ms>
	LCD_WriteCommand(0x38);
 11a:	88 e3       	ldi	r24, 0x38	; 56
 11c:	ea df       	rcall	.-44     	; 0xf2 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	e8 df       	rcall	.-48     	; 0xf2 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 122:	8f e0       	ldi	r24, 0x0F	; 15
 124:	e6 df       	rcall	.-52     	; 0xf2 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	e4 df       	rcall	.-56     	; 0xf2 <LCD_WriteCommand>
	delay_ms(10);		
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ce cf       	rjmp	.-100    	; 0xcc <delay_ms>
 130:	08 95       	ret

00000132 <LCD_WriteData>:
 132:	5e 9a       	sbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 134:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 136:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 138:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 13a:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	c5 cf       	rjmp	.-118    	; 0xcc <delay_ms>
 142:	08 95       	ret

00000144 <TimerISR>:
            output_y = 0x00;
            break;
    }
    
    return state;
}
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cb e0       	ldi	r28, 0x0B	; 11
 152:	d1 e0       	ldi	r29, 0x01	; 1
 154:	0f 2e       	mov	r0, r31
 156:	f3 e2       	ldi	r31, 0x23	; 35
 158:	ef 2e       	mov	r14, r31
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	ff 2e       	mov	r15, r31
 15e:	f0 2d       	mov	r31, r0
 160:	8e 01       	movw	r16, r28
 162:	89 85       	ldd	r24, Y+9	; 0x09
 164:	88 23       	and	r24, r24
 166:	c9 f0       	breq	.+50     	; 0x19a <TimerISR+0x56>
 168:	4d 81       	ldd	r20, Y+5	; 0x05
 16a:	5e 81       	ldd	r21, Y+6	; 0x06
 16c:	6f 81       	ldd	r22, Y+7	; 0x07
 16e:	78 85       	ldd	r23, Y+8	; 0x08
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	9a 81       	ldd	r25, Y+2	; 0x02
 174:	ab 81       	ldd	r26, Y+3	; 0x03
 176:	bc 81       	ldd	r27, Y+4	; 0x04
 178:	48 17       	cp	r20, r24
 17a:	59 07       	cpc	r21, r25
 17c:	6a 07       	cpc	r22, r26
 17e:	7b 07       	cpc	r23, r27
 180:	60 f0       	brcs	.+24     	; 0x19a <TimerISR+0x56>
 182:	88 81       	ld	r24, Y
 184:	ea 85       	ldd	r30, Y+10	; 0x0a
 186:	fb 85       	ldd	r31, Y+11	; 0x0b
 188:	08 2e       	mov	r0, r24
 18a:	00 0c       	add	r0, r0
 18c:	99 0b       	sbc	r25, r25
 18e:	09 95       	icall
 190:	88 83       	st	Y, r24
 192:	1d 82       	std	Y+5, r1	; 0x05
 194:	1e 82       	std	Y+6, r1	; 0x06
 196:	1f 82       	std	Y+7, r1	; 0x07
 198:	18 86       	std	Y+8, r1	; 0x08
 19a:	f8 01       	movw	r30, r16
 19c:	85 81       	ldd	r24, Z+5	; 0x05
 19e:	96 81       	ldd	r25, Z+6	; 0x06
 1a0:	a7 81       	ldd	r26, Z+7	; 0x07
 1a2:	b0 85       	ldd	r27, Z+8	; 0x08
 1a4:	c2 96       	adiw	r24, 0x32	; 50
 1a6:	a1 1d       	adc	r26, r1
 1a8:	b1 1d       	adc	r27, r1
 1aa:	85 83       	std	Z+5, r24	; 0x05
 1ac:	96 83       	std	Z+6, r25	; 0x06
 1ae:	a7 83       	std	Z+7, r26	; 0x07
 1b0:	b0 87       	std	Z+8, r27	; 0x08
 1b2:	2c 96       	adiw	r28, 0x0c	; 12
 1b4:	ce 15       	cp	r28, r14
 1b6:	df 05       	cpc	r29, r15
 1b8:	99 f6       	brne	.-90     	; 0x160 <TimerISR+0x1c>
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	ff 90       	pop	r15
 1c4:	ef 90       	pop	r14
 1c6:	08 95       	ret

000001c8 <__vector_13>:
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	0b b6       	in	r0, 0x3b	; 59
 1d4:	0f 92       	push	r0
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
 1ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1f2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1f6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 1fa:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	a1 09       	sbc	r26, r1
 202:	b1 09       	sbc	r27, r1
 204:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 208:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 20c:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 210:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 214:	89 2b       	or	r24, r25
 216:	8a 2b       	or	r24, r26
 218:	8b 2b       	or	r24, r27
 21a:	89 f4       	brne	.+34     	; 0x23e <__vector_13+0x76>
 21c:	93 df       	rcall	.-218    	; 0x144 <TimerISR>
 21e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 222:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 226:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 22a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 22e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 232:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 236:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 23a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0b be       	out	0x3b, r0	; 59
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <TimerSet>:
 264:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 268:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 26c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 270:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 274:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 278:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 27c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 280:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 284:	08 95       	ret

00000286 <initUSART>:
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	81 f0       	breq	.+32     	; 0x2aa <initUSART+0x24>
 28a:	e1 ec       	ldi	r30, 0xC1	; 193
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	88 61       	ori	r24, 0x18	; 24
 292:	80 83       	st	Z, r24
 294:	e2 ec       	ldi	r30, 0xC2	; 194
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	86 60       	ori	r24, 0x06	; 6
 29c:	80 83       	st	Z, r24
 29e:	83 e3       	ldi	r24, 0x33	; 51
 2a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2a4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2a8:	08 95       	ret
 2aa:	e9 ec       	ldi	r30, 0xC9	; 201
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	88 61       	ori	r24, 0x18	; 24
 2b2:	80 83       	st	Z, r24
 2b4:	ea ec       	ldi	r30, 0xCA	; 202
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	86 60       	ori	r24, 0x06	; 6
 2bc:	80 83       	st	Z, r24
 2be:	83 e3       	ldi	r24, 0x33	; 51
 2c0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 2c4:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 2c8:	08 95       	ret

000002ca <Tick_Sensor>:
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	21 f0       	breq	.+8      	; 0x2d6 <Tick_Sensor+0xc>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	91 05       	cpc	r25, r1
 2d2:	81 f0       	breq	.+32     	; 0x2f4 <Tick_Sensor+0x2a>
 2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <Tick_Sensor+0x1a>
 2d6:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <sensor_x>
 2da:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <sensor_y>
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	08 95       	ret
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	cf df       	rcall	.-98     	; 0x286 <initUSART>
 2e8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <sensor_x>
 2ec:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <sensor_y>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	08 95       	ret

000002f6 <SPI_MasterInit>:
 2f6:	80 ea       	ldi	r24, 0xA0	; 160
 2f8:	84 b9       	out	0x04, r24	; 4
 2fa:	81 e5       	ldi	r24, 0x51	; 81
 2fc:	8c bd       	out	0x2c, r24	; 44
 2fe:	08 95       	ret

00000300 <SPI_Transmit>:
 300:	8e bd       	out	0x2e, r24	; 46
 302:	0d b4       	in	r0, 0x2d	; 45
 304:	07 fe       	sbrs	r0, 7
 306:	fd cf       	rjmp	.-6      	; 0x302 <SPI_Transmit+0x2>
 308:	2c 98       	cbi	0x05, 4	; 5
 30a:	2c 9a       	sbi	0x05, 4	; 5
 30c:	08 95       	ret

0000030e <LEDMatrix8x8_init>:
 30e:	f3 df       	rcall	.-26     	; 0x2f6 <SPI_MasterInit>
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	87 b9       	out	0x07, r24	; 7
 314:	18 b8       	out	0x08, r1	; 8
 316:	8a b9       	out	0x0a, r24	; 10
 318:	1b b8       	out	0x0b, r1	; 11
 31a:	08 95       	ret

0000031c <Tick_LED8x8>:
 31c:	00 97       	sbiw	r24, 0x00	; 0
 31e:	19 f0       	breq	.+6      	; 0x326 <Tick_LED8x8+0xa>
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	39 f0       	breq	.+14     	; 0x332 <Tick_LED8x8+0x16>
 324:	02 c0       	rjmp	.+4      	; 0x32a <Tick_LED8x8+0xe>
 326:	f3 df       	rcall	.-26     	; 0x30e <LEDMatrix8x8_init>
 328:	04 c0       	rjmp	.+8      	; 0x332 <Tick_LED8x8+0x16>
 32a:	f1 df       	rcall	.-30     	; 0x30e <LEDMatrix8x8_init>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	08 95       	ret
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	e5 df       	rcall	.-54     	; 0x300 <SPI_Transmit>
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	08 95       	ret

0000033c <main>:
#include "reactive_led_matrix_sm.h"

#include "io.h"

int main(void) {
    DDRA = 0x00; PORTA = 0xFF; //Initialize PORTA for input
 33c:	11 b8       	out	0x01, r1	; 1
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	82 b9       	out	0x02, r24	; 2
    DDRD = 0xFF; PORTD = 0x00; //Initialize PORTD for output
 342:	8a b9       	out	0x0a, r24	; 10
 344:	1b b8       	out	0x0b, r1	; 11
    
    unsigned char i = 0;
    tasks[i].state       = INIT_SENSOR;
 346:	eb e0       	ldi	r30, 0x0B	; 11
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	10 82       	st	Z, r1
    tasks[i].period      = SENSOR_PERIOD;
 34c:	44 e6       	ldi	r20, 0x64	; 100
 34e:	50 e0       	ldi	r21, 0x00	; 0
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	41 83       	std	Z+1, r20	; 0x01
 356:	52 83       	std	Z+2, r21	; 0x02
 358:	63 83       	std	Z+3, r22	; 0x03
 35a:	74 83       	std	Z+4, r23	; 0x04
    tasks[i].elapsedTime = 0;
 35c:	15 82       	std	Z+5, r1	; 0x05
 35e:	16 82       	std	Z+6, r1	; 0x06
 360:	17 82       	std	Z+7, r1	; 0x07
 362:	10 86       	std	Z+8, r1	; 0x08
    tasks[i].active      = 0x01;
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	91 87       	std	Z+9, r25	; 0x09
    tasks[i].TickFct     = &Tick_Sensor;
 368:	25 e6       	ldi	r18, 0x65	; 101
 36a:	31 e0       	ldi	r19, 0x01	; 1
 36c:	33 87       	std	Z+11, r19	; 0x0b
 36e:	22 87       	std	Z+10, r18	; 0x0a
    ++i;
    tasks[i].state       = INIT_LED8x8;
 370:	14 86       	std	Z+12, r1	; 0x0c
    tasks[i].period      = LED8x8_PERIOD;
 372:	45 87       	std	Z+13, r20	; 0x0d
 374:	56 87       	std	Z+14, r21	; 0x0e
 376:	67 87       	std	Z+15, r22	; 0x0f
 378:	70 8b       	std	Z+16, r23	; 0x10
    tasks[i].elapsedTime = 0;
 37a:	11 8a       	std	Z+17, r1	; 0x11
 37c:	12 8a       	std	Z+18, r1	; 0x12
 37e:	13 8a       	std	Z+19, r1	; 0x13
 380:	14 8a       	std	Z+20, r1	; 0x14
    tasks[i].active      = 0x01;
 382:	95 8b       	std	Z+21, r25	; 0x15
    tasks[i].TickFct     = &Tick_LED8x8;
 384:	2e e8       	ldi	r18, 0x8E	; 142
 386:	31 e0       	ldi	r19, 0x01	; 1
 388:	37 8b       	std	Z+23, r19	; 0x17
 38a:	26 8b       	std	Z+22, r18	; 0x16
    ++i;
	
	DDRC = 0xFF; PORTC = 0x00;
 38c:	87 b9       	out	0x07, r24	; 7
 38e:	18 b8       	out	0x08, r1	; 8
	
    LCD_init();
 390:	c1 de       	rcall	.-638    	; 0x114 <LCD_init>
    LCD_BacklightOn();
 392:	9a de       	rcall	.-716    	; 0xc8 <LCD_BacklightOn>
	LCD_Cursor(5);
 394:	85 e0       	ldi	r24, 0x05	; 5
 396:	b6 de       	rcall	.-660    	; 0x104 <LCD_Cursor>
    LCD_WriteData('a');
 398:	81 e6       	ldi	r24, 0x61	; 97
 39a:	cb de       	rcall	.-618    	; 0x132 <LCD_WriteData>
 39c:	62 e3       	ldi	r22, 0x32	; 50
    
    TimerSet(GLOBAL_PERIOD);
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	5f df       	rcall	.-322    	; 0x264 <TimerSet>
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <main+0x6a>

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
