
rlee037_reactive_LED_matrix_cs122a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000040a  0000049e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800104  00800104  000004a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e89  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000990  00000000  00000000  00001475  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000841  00000000  00000000  00001e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f3  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000620  00000000  00000000  00002f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000356b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c3 c0       	rjmp	.+390    	; 0x1bc <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e0       	ldi	r30, 0x0A	; 10
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 33       	cpi	r26, 0x36	; 54
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	66 d1       	rcall	.+716    	; 0x390 <main>
  c4:	a0 c1       	rjmp	.+832    	; 0x406 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Tick_Sensor>:
        SHIFT_REG |= (1 << SRCLK);       // set SRCLK = 1. Rising edge shifts next bit of data into the shift register
    }                                 // end for each bit of data
    
    SHIFT_REG |= (1 << RCLK);         // set RCLK = 1. Rising edge copies data from the "Shift" register to the "Storage" register
    
    SHIFT_REG = 0x00;                 // clears all lines in preparation of a new transmission
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	21 f0       	breq	.+8      	; 0xd4 <Tick_Sensor+0xc>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	71 f0       	breq	.+28     	; 0xee <Tick_Sensor+0x26>
  d2:	07 c0       	rjmp	.+14     	; 0xe2 <Tick_Sensor+0x1a>
  d4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <sensor_x>
  d8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <sensor_y>
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret
  e2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <sensor_x>
  e6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <sensor_y>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	08 95       	ret

000000f0 <TimerOn>:
  f0:	8b e0       	ldi	r24, 0x0B	; 11
  f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f6:	8d e7       	ldi	r24, 0x7D	; 125
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 108:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 10c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 118:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 11c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 120:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 124:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 128:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 12c:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 130:	8f b7       	in	r24, 0x3f	; 63
 132:	80 68       	ori	r24, 0x80	; 128
 134:	8f bf       	out	0x3f, r24	; 63
 136:	08 95       	ret

00000138 <TimerISR>:
 138:	ef 92       	push	r14
 13a:	ff 92       	push	r15
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cc e0       	ldi	r28, 0x0C	; 12
 146:	d1 e0       	ldi	r29, 0x01	; 1
 148:	0f 2e       	mov	r0, r31
 14a:	f0 e3       	ldi	r31, 0x30	; 48
 14c:	ef 2e       	mov	r14, r31
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	ff 2e       	mov	r15, r31
 152:	f0 2d       	mov	r31, r0
 154:	8e 01       	movw	r16, r28
 156:	89 85       	ldd	r24, Y+9	; 0x09
 158:	88 23       	and	r24, r24
 15a:	c9 f0       	breq	.+50     	; 0x18e <TimerISR+0x56>
 15c:	4d 81       	ldd	r20, Y+5	; 0x05
 15e:	5e 81       	ldd	r21, Y+6	; 0x06
 160:	6f 81       	ldd	r22, Y+7	; 0x07
 162:	78 85       	ldd	r23, Y+8	; 0x08
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	ab 81       	ldd	r26, Y+3	; 0x03
 16a:	bc 81       	ldd	r27, Y+4	; 0x04
 16c:	48 17       	cp	r20, r24
 16e:	59 07       	cpc	r21, r25
 170:	6a 07       	cpc	r22, r26
 172:	7b 07       	cpc	r23, r27
 174:	60 f0       	brcs	.+24     	; 0x18e <TimerISR+0x56>
 176:	88 81       	ld	r24, Y
 178:	ea 85       	ldd	r30, Y+10	; 0x0a
 17a:	fb 85       	ldd	r31, Y+11	; 0x0b
 17c:	08 2e       	mov	r0, r24
 17e:	00 0c       	add	r0, r0
 180:	99 0b       	sbc	r25, r25
 182:	09 95       	icall
 184:	88 83       	st	Y, r24
 186:	1d 82       	std	Y+5, r1	; 0x05
 188:	1e 82       	std	Y+6, r1	; 0x06
 18a:	1f 82       	std	Y+7, r1	; 0x07
 18c:	18 86       	std	Y+8, r1	; 0x08
 18e:	f8 01       	movw	r30, r16
 190:	85 81       	ldd	r24, Z+5	; 0x05
 192:	96 81       	ldd	r25, Z+6	; 0x06
 194:	a7 81       	ldd	r26, Z+7	; 0x07
 196:	b0 85       	ldd	r27, Z+8	; 0x08
 198:	c2 96       	adiw	r24, 0x32	; 50
 19a:	a1 1d       	adc	r26, r1
 19c:	b1 1d       	adc	r27, r1
 19e:	85 83       	std	Z+5, r24	; 0x05
 1a0:	96 83       	std	Z+6, r25	; 0x06
 1a2:	a7 83       	std	Z+7, r26	; 0x07
 1a4:	b0 87       	std	Z+8, r27	; 0x08
 1a6:	2c 96       	adiw	r28, 0x0c	; 12
 1a8:	ce 15       	cp	r28, r14
 1aa:	df 05       	cpc	r29, r15
 1ac:	99 f6       	brne	.-90     	; 0x154 <TimerISR+0x1c>
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	08 95       	ret

000001bc <__vector_13>:
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	0b b6       	in	r0, 0x3b	; 59
 1c8:	0f 92       	push	r0
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
 1e2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 1e6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 1ea:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 1ee:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	a1 09       	sbc	r26, r1
 1f6:	b1 09       	sbc	r27, r1
 1f8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 1fc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 200:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 204:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 208:	89 2b       	or	r24, r25
 20a:	8a 2b       	or	r24, r26
 20c:	8b 2b       	or	r24, r27
 20e:	89 f4       	brne	.+34     	; 0x232 <__vector_13+0x76>
 210:	93 df       	rcall	.-218    	; 0x138 <TimerISR>
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 216:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 21a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 21e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 222:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 226:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 22a:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 22e:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0b be       	out	0x3b, r0	; 59
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <TimerSet>:
 258:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 25c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 260:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 264:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 268:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <_avr_timer_cntcurr>
 26c:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <_avr_timer_cntcurr+0x1>
 270:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr+0x2>
 274:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x3>
 278:	08 95       	ret

0000027a <LEDMatrix8x8_init>:
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	87 b9       	out	0x07, r24	; 7
 27e:	18 b8       	out	0x08, r1	; 8
 280:	8a b9       	out	0x0a, r24	; 10
 282:	1b b8       	out	0x0b, r1	; 11
 284:	08 95       	ret

00000286 <Tick_LED8x8>:
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	19 f0       	breq	.+6      	; 0x290 <Tick_LED8x8+0xa>
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	39 f0       	breq	.+14     	; 0x29c <Tick_LED8x8+0x16>
 28e:	02 c0       	rjmp	.+4      	; 0x294 <Tick_LED8x8+0xe>
 290:	f4 df       	rcall	.-24     	; 0x27a <LEDMatrix8x8_init>
 292:	04 c0       	rjmp	.+8      	; 0x29c <Tick_LED8x8+0x16>
 294:	f2 df       	rcall	.-28     	; 0x27a <LEDMatrix8x8_init>
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	08 95       	ret
 29c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <output_y>
 2a0:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <output_x>
 2a4:	98 b9       	out	0x08, r25	; 8
 2a6:	80 95       	com	r24
 2a8:	8b b9       	out	0x0b, r24	; 11
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	08 95       	ret

000002b0 <move>:

//0x00: no shift
//0x01: shift left
//0x02: shift right
void move(int x, int y) {
    switch (x) {
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	91 05       	cpc	r25, r1
 2b4:	19 f0       	breq	.+6      	; 0x2bc <move+0xc>
 2b6:	02 97       	sbiw	r24, 0x02	; 2
 2b8:	49 f0       	breq	.+18     	; 0x2cc <move+0x1c>
 2ba:	0f c0       	rjmp	.+30     	; 0x2da <move+0x2a>
        case 0x00: //do nothing
            break;
        case 0x01:
            if (!(PUCK_x & 0x80)) {
 2bc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <PUCK_x>
 2c0:	88 23       	and	r24, r24
 2c2:	5c f0       	brlt	.+22     	; 0x2da <move+0x2a>
                PUCK_x = PUCK_x << 1;
 2c4:	88 0f       	add	r24, r24
 2c6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <PUCK_x>
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <move+0x2a>
            }
            break;
        case 0x02:
            if (!(PUCK_x & 0x01)) {
 2cc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <PUCK_x>
 2d0:	80 fd       	sbrc	r24, 0
 2d2:	03 c0       	rjmp	.+6      	; 0x2da <move+0x2a>
                PUCK_x = PUCK_x >> 1;
 2d4:	86 95       	lsr	r24
 2d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <PUCK_x>
            break;
        default: //do nothing
            break;
    }
    
    switch (y) {
 2da:	61 30       	cpi	r22, 0x01	; 1
 2dc:	71 05       	cpc	r23, r1
 2de:	21 f0       	breq	.+8      	; 0x2e8 <move+0x38>
 2e0:	62 30       	cpi	r22, 0x02	; 2
 2e2:	71 05       	cpc	r23, r1
 2e4:	49 f0       	breq	.+18     	; 0x2f8 <move+0x48>
 2e6:	08 95       	ret
        case 0x00: //do nothing
            break;
        case 0x01:
            if (!(PUCK_y & 0x80)) {
 2e8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <PUCK_y>
 2ec:	88 23       	and	r24, r24
 2ee:	5c f0       	brlt	.+22     	; 0x306 <move+0x56>
                PUCK_y = PUCK_y << 1;
 2f0:	88 0f       	add	r24, r24
 2f2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <PUCK_y>
 2f6:	08 95       	ret
            }
            break;
        case 0x02:
            if (!(PUCK_y & 0x01)) {
 2f8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <PUCK_y>
 2fc:	80 fd       	sbrc	r24, 0
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <move+0x56>
                PUCK_y = PUCK_y >> 1;
 300:	86 95       	lsr	r24
 302:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <PUCK_y>
 306:	08 95       	ret

00000308 <Tick_Coordinate>:
    unsigned char input_x = 0x00;
    unsigned char input_y = 0x00;
    
    static unsigned char temp = 0; //TEST
    
    switch (state) { //transitions
 308:	00 97       	sbiw	r24, 0x00	; 0
 30a:	19 f0       	breq	.+6      	; 0x312 <Tick_Coordinate+0xa>
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	a1 f0       	breq	.+40     	; 0x338 <Tick_Coordinate+0x30>
 310:	0c c0       	rjmp	.+24     	; 0x32a <Tick_Coordinate+0x22>
        case INIT_COORDINATE:
            PUCK_x = 0x01;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <PUCK_x>
            PUCK_y = 0x01;
 318:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <PUCK_y>
            output_x = 0x00;
 31c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <output_x>
            output_y = 0x00;
 320:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <output_y>
            temp = 0;
 324:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 328:	07 c0       	rjmp	.+14     	; 0x338 <Tick_Coordinate+0x30>
            break;
    }
    
    switch (state) { //actions
        case INIT_COORDINATE:
            output_x = 0x00;
 32a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <output_x>
            output_y = 0x00;
 32e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <output_y>
            break;
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	08 95       	ret
        case CALCULATE_COORDINATE:
            if (~(PINA) & 0x01) {
 338:	00 9b       	sbis	0x00, 0	; 0
 33a:	04 c0       	rjmp	.+8      	; 0x344 <Tick_Coordinate+0x3c>
                input_x = 0x01;
            } else if (~(PINA) & 0x02) {
 33c:	01 99       	sbic	0x00, 1	; 0
 33e:	04 c0       	rjmp	.+8      	; 0x348 <Tick_Coordinate+0x40>
                input_x = 0x02;
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	03 c0       	rjmp	.+6      	; 0x34a <Tick_Coordinate+0x42>
            output_x = 0x00;
            output_y = 0x00;
            break;
        case CALCULATE_COORDINATE:
            if (~(PINA) & 0x01) {
                input_x = 0x01;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	01 c0       	rjmp	.+2      	; 0x34a <Tick_Coordinate+0x42>
enum Coordinate_states{INIT_COORDINATE, CALCULATE_COORDINATE}Coordinate_state;
int Tick_Coordinate(int state) { // Get sensor input & puck position to create output
    static unsigned char prev_x;
    static unsigned char prev_y;
    
    unsigned char input_x = 0x00;
 348:	80 e0       	ldi	r24, 0x00	; 0
            if (~(PINA) & 0x01) {
                input_x = 0x01;
            } else if (~(PINA) & 0x02) {
                input_x = 0x02;
            }
            if (~(PINA) & 0x04) {
 34a:	02 9b       	sbis	0x00, 2	; 0
 34c:	04 c0       	rjmp	.+8      	; 0x356 <Tick_Coordinate+0x4e>
                input_y = 0x01;
            } else if (~(PINA) & 0x08) {
 34e:	03 99       	sbic	0x00, 3	; 0
 350:	04 c0       	rjmp	.+8      	; 0x35a <Tick_Coordinate+0x52>
                input_y = 0x02;
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	03 c0       	rjmp	.+6      	; 0x35c <Tick_Coordinate+0x54>
                input_x = 0x01;
            } else if (~(PINA) & 0x02) {
                input_x = 0x02;
            }
            if (~(PINA) & 0x04) {
                input_y = 0x01;
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	01 c0       	rjmp	.+2      	; 0x35c <Tick_Coordinate+0x54>
int Tick_Coordinate(int state) { // Get sensor input & puck position to create output
    static unsigned char prev_x;
    static unsigned char prev_y;
    
    unsigned char input_x = 0x00;
    unsigned char input_y = 0x00;
 35a:	60 e0       	ldi	r22, 0x00	; 0
            if (~(PINA) & 0x04) {
                input_y = 0x01;
            } else if (~(PINA) & 0x08) {
                input_y = 0x02;
            }
            move(input_x, input_y);
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	a7 df       	rcall	.-178    	; 0x2b0 <move>
            output_x = PUCK_x;
 362:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <PUCK_x>
 366:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <output_x>
            output_y = PUCK_y;
 36a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <PUCK_y>
 36e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <output_y>
            if (temp < 8) {
 372:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 376:	88 30       	cpi	r24, 0x08	; 8
 378:	30 f4       	brcc	.+12     	; 0x386 <Tick_Coordinate+0x7e>
                ++temp;
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	08 95       	ret
            } else {temp = 0;}
 386:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
            output_y = 0x00;
            break;
    }
    
    return state;
}
 38e:	08 95       	ret

00000390 <main>:
#include "reactive_led_matrix_sm.h"

#include "io.h"

int main(void) {
    DDRA = 0x00; PORTA = 0xFF; //Initialize PORTA for input
 390:	11 b8       	out	0x01, r1	; 1
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	82 b9       	out	0x02, r24	; 2
    
    unsigned char i = 0;
    tasks[i].state       = INIT_SENSOR;
 396:	ec e0       	ldi	r30, 0x0C	; 12
 398:	f1 e0       	ldi	r31, 0x01	; 1
 39a:	10 82       	st	Z, r1
    tasks[i].period      = SENSOR_PERIOD;
 39c:	44 e6       	ldi	r20, 0x64	; 100
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	41 83       	std	Z+1, r20	; 0x01
 3a6:	52 83       	std	Z+2, r21	; 0x02
 3a8:	63 83       	std	Z+3, r22	; 0x03
 3aa:	74 83       	std	Z+4, r23	; 0x04
    tasks[i].elapsedTime = 0;
 3ac:	15 82       	std	Z+5, r1	; 0x05
 3ae:	16 82       	std	Z+6, r1	; 0x06
 3b0:	17 82       	std	Z+7, r1	; 0x07
 3b2:	10 86       	std	Z+8, r1	; 0x08
    tasks[i].active      = 0x01;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	81 87       	std	Z+9, r24	; 0x09
    tasks[i].TickFct     = &Tick_Sensor;
 3b8:	24 e6       	ldi	r18, 0x64	; 100
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	33 87       	std	Z+11, r19	; 0x0b
 3be:	22 87       	std	Z+10, r18	; 0x0a
    ++i;
    tasks[i].state       = INIT_COORDINATE;
 3c0:	14 86       	std	Z+12, r1	; 0x0c
    tasks[i].period      = COORDINATE_PERIOD;
 3c2:	45 87       	std	Z+13, r20	; 0x0d
 3c4:	56 87       	std	Z+14, r21	; 0x0e
 3c6:	67 87       	std	Z+15, r22	; 0x0f
 3c8:	70 8b       	std	Z+16, r23	; 0x10
    tasks[i].elapsedTime = 0;
 3ca:	11 8a       	std	Z+17, r1	; 0x11
 3cc:	12 8a       	std	Z+18, r1	; 0x12
 3ce:	13 8a       	std	Z+19, r1	; 0x13
 3d0:	14 8a       	std	Z+20, r1	; 0x14
    tasks[i].active      = 0x01;
 3d2:	85 8b       	std	Z+21, r24	; 0x15
    tasks[i].TickFct     = &Tick_Coordinate;
 3d4:	24 e8       	ldi	r18, 0x84	; 132
 3d6:	31 e0       	ldi	r19, 0x01	; 1
 3d8:	37 8b       	std	Z+23, r19	; 0x17
 3da:	26 8b       	std	Z+22, r18	; 0x16
    ++i;
    tasks[i].state       = INIT_LED8x8;
 3dc:	10 8e       	std	Z+24, r1	; 0x18
    tasks[i].period      = LED8x8_PERIOD;
 3de:	41 8f       	std	Z+25, r20	; 0x19
 3e0:	52 8f       	std	Z+26, r21	; 0x1a
 3e2:	63 8f       	std	Z+27, r22	; 0x1b
 3e4:	74 8f       	std	Z+28, r23	; 0x1c
    tasks[i].elapsedTime = 0;
 3e6:	15 8e       	std	Z+29, r1	; 0x1d
 3e8:	16 8e       	std	Z+30, r1	; 0x1e
 3ea:	17 8e       	std	Z+31, r1	; 0x1f
 3ec:	10 a2       	std	Z+32, r1	; 0x20
    tasks[i].active      = 0x01;
 3ee:	81 a3       	std	Z+33, r24	; 0x21
    tasks[i].TickFct     = &Tick_LED8x8;
 3f0:	83 e4       	ldi	r24, 0x43	; 67
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	93 a3       	std	Z+35, r25	; 0x23
 3f6:	82 a3       	std	Z+34, r24	; 0x22
    ++i;
    
    TimerSet(GLOBAL_PERIOD);
 3f8:	62 e3       	ldi	r22, 0x32	; 50
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	2b df       	rcall	.-426    	; 0x258 <TimerSet>
    TimerOn();
 402:	76 de       	rcall	.-788    	; 0xf0 <TimerOn>
 404:	ff cf       	rjmp	.-2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
